package DP;

public class FibonacciSeries {

	public static void main(String[] args) {
		System.out.println(fibRecursive(20));
		int n = 20;
		// top down gives stack overflow error for 10^5
		System.out.println(fibTopDown(n, new int[n + 1]));
		System.out.println(fibBottomUp(n));
		System.out.println(fibBottomUpSpaceEff(n));

	}

	public static int fibRecursive(int n) {

		if (n == 0 || n == 1) {
			return n;
		}
		int m = fibRecursive(n - 1);
		int p = fibRecursive(n - 2);

		return m + p;
	}

	public static int fibTopDown(int n, int[] strg) {
		if (n == 0 || n == 1) {
			return n;
		}

		if (strg[n] != 0) { // re- use
			return strg[n];
		}
		int m = fibTopDown(n - 1, strg);
		int p = fibTopDown(n - 2, strg);
		strg[n] = m + p; // Store
		return m + p;
	}

	public static int fibBottomUp(int n) {
		// array size
		int[] strg = new int[n + 1];

		// base case values fill
		strg[0] = 0;
		strg[1] = 1;

		// filling direction left->right
		for (int i = 2; i <= n; i++) {

			strg[i] = strg[i - 1] + strg[i - 2];

		}
		return strg[n];
	}

	public static int fibBottomUpSpaceEff(int n) {
		int[] strg = new int[2];
		// base case values fill
		strg[0] = 0;
		strg[1] = 1;
		// filling direction left->right
		for(int slide=0;slide < n-1;slide++) {
			int sum=strg[0]+strg[1];
			strg[0]=strg[1];
			strg[1]=sum;
		}
		return strg[1];
	}
}
